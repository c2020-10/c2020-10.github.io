<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0x00基本算法</title>
    <url>/2022/02/21/0x00%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><blockquote>
<p>通常以二进制形式进行$\&amp;,|,\^,&gt;&gt;,&lt;&lt;$运算</p>
</blockquote>
<h3 id="a-b"><a href="#a-b" class="headerlink" title="a^b"></a><a href="https://www.acwing.com/problem/content/91/">a^b</a></h3><blockquote>
<p>求 a 的 b 次方对 p 取模的值.</p>
</blockquote>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=(<span class="type">long</span> <span class="type">long</span>)res*a%p;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">qmi</span>(n,m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="64位整数乘法"><a href="#64位整数乘法" class="headerlink" title="64位整数乘法"></a><a href="https://www.acwing.com/problem/content/92/">64位整数乘法</a></h3><blockquote>
<p>该做法可以为了防止在计算时出现ll溢出</p>
</blockquote>
<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line">ULL a,b,p;</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">qad</span><span class="params">(ULL a,ULL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ULL res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=(res+a)%p;</span><br><span class="line">        a=(a+a)%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">qad</span>(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a><a href="https://www.acwing.com/problem/content/93/">最短Hamilton路径</a></h3><blockquote>
<p>考察二进制枚举</p>
</blockquote>
<h4 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> f[<span class="number">1</span>&lt;&lt;N][N],n;</span><br><span class="line"><span class="type">int</span> d[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            cin&gt;&gt;d[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">                    <span class="keyword">if</span>(i-(<span class="number">1</span>&lt;&lt;j)&gt;&gt;k&amp;<span class="number">1</span>)</span><br><span class="line">                        f[i][j]=<span class="built_in">min</span>(f[i][j],f[(i-(<span class="number">1</span>&lt;&lt;j))][k]+d[k][j]);</span><br><span class="line">    cout&lt;&lt;f[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="起床困难综合症"><a href="#起床困难综合症" class="headerlink" title="起床困难综合症"></a><a href="https://www.acwing.com/problem/content/1000/">起床困难综合症</a></h3><blockquote>
<p>枚举二进制下的每一位,通过该方法枚举，计算出每一位可获得的Max值，再进行|,即可得到所求值</p>
</blockquote>
<h4 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;PII;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">PII p[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">opt</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> lo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i].x==<span class="number">1</span>)key=key&amp;(p[i].y&gt;&gt;lo&amp;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p[i].x==<span class="number">2</span>)key=key|(p[i].y&gt;&gt;lo&amp;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> key=key^(p[i].y&gt;&gt;lo&amp;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">char</span> op[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;key;</span><br><span class="line">        <span class="keyword">if</span>(*op==<span class="string">&#x27;A&#x27;</span>)p[i].x=<span class="number">1</span>,p[i].y=key;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(*op==<span class="string">&#x27;O&#x27;</span>)p[i].x=<span class="number">2</span>,p[i].y=key;</span><br><span class="line">        <span class="keyword">else</span> p[i].x=<span class="number">3</span>,p[i].y=key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> change=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">opt</span>(<span class="number">0</span>,i),y=<span class="built_in">opt</span>(<span class="number">1</span>,i);</span><br><span class="line">        <span class="type">int</span> val=<span class="built_in">max</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>((m&gt;&gt;i&amp;<span class="number">1</span>)&amp;&amp;(y&lt;=x))change=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(change)res|=val&lt;&lt;i;</span><br><span class="line">        <span class="keyword">else</span> res|=<span class="built_in">opt</span>((m&gt;&gt;i&amp;<span class="number">1</span>),i)&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="递推与递归"><a href="#递推与递归" class="headerlink" title="递推与递归"></a>递推与递归</h2><blockquote>
<p>递归与递推通常是找规律以及dfs的方法进行解决,递推又是通常由大规模问题找到切入点，转化为小规模问题。</p>
</blockquote>
<h3 id="递归实现指数型枚举"><a href="#递归实现指数型枚举" class="headerlink" title="递归实现指数型枚举"></a><a href="https://www.acwing.com/problem/content/94/">递归实现指数型枚举</a></h3><blockquote>
<p>考虑二进制下每一位$0/1$即可</p>
</blockquote>
<h4 id="code-4"><a href="#code-4" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">if</span>(state&gt;&gt;i&amp;<span class="number">1</span>)cout&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(u+<span class="number">1</span>,state);</span><br><span class="line">    <span class="built_in">dfs</span>(u+<span class="number">1</span>,state+(<span class="number">1</span>&lt;&lt;u));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="递归实现组合型枚举"><a href="#递归实现组合型枚举" class="headerlink" title="递归实现组合型枚举"></a><a href="https://www.acwing.com/activity/content/problem/content/327/">递归实现组合型枚举</a></h3><blockquote>
<p>对数组中的数的个数存在约束，在dfs的过程中将这一约束体现出来</p>
</blockquote>
<h4 id="code-5"><a href="#code-5" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> p[<span class="number">30</span>],n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt==m)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;p[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=v+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        p[cnt+<span class="number">1</span>]=i;</span><br><span class="line">        <span class="built_in">dfs</span>(i,cnt+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="递归实现排列型枚举"><a href="#递归实现排列型枚举" class="headerlink" title="递归实现排列型枚举"></a><a href="https://www.acwing.com/problem/content/96/">递归实现排列型枚举</a></h3><blockquote>
<p>dfs对每一个位置的数判断选的数种类</p>
</blockquote>
<h4 id="code-6"><a href="#code-6" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> st[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> path[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;path[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            path[cnt]=i;</span><br><span class="line">            st[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(cnt+<span class="number">1</span>);</span><br><span class="line">            st[i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="费解的开关"><a href="#费解的开关" class="headerlink" title="费解的开关"></a><a href="https://www.acwing.com/problem/content/97/">费解的开关</a></h3><blockquote>
<p>上一排的灯的状态由下一排来决定，采用二进制的方式先枚举对第一排的灯的控制进行开关，随后进行后续开关的转化，并在最后判断最后一排满足以及操作次数的限制</p>
</blockquote>
<h4 id="code-7"><a href="#code-7" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> g[<span class="number">6</span>][<span class="number">6</span>],backup[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">turn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> xx=dx[i]+x,yy=dy[i]+y;</span><br><span class="line">        <span class="keyword">if</span>(xx&lt;<span class="number">0</span>||xx&gt;=<span class="number">5</span>||yy&lt;<span class="number">0</span>||yy&gt;=<span class="number">5</span>)<span class="keyword">continue</span>;</span><br><span class="line">        g[xx][yy]^=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)cin&gt;&gt;g[i];</span><br><span class="line">        <span class="type">int</span> res=<span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> op=<span class="number">0</span>;op&lt;<span class="number">32</span>;op++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(backup,g,<span class="keyword">sizeof</span> g);</span><br><span class="line">            <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">                <span class="keyword">if</span>(op&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    t++;</span><br><span class="line">                    <span class="built_in">turn</span>(<span class="number">0</span>,i);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">                    <span class="keyword">if</span>(g[i][j]==<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        t++;</span><br><span class="line">                        <span class="built_in">turn</span>(i+<span class="number">1</span>,j);</span><br><span class="line">                    &#125;</span><br><span class="line">            <span class="type">bool</span> f=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">                <span class="keyword">if</span>(g[<span class="number">4</span>][i]==<span class="string">&#x27;0&#x27;</span>)f=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(f)res=<span class="built_in">min</span>(res,t);</span><br><span class="line">            <span class="built_in">memcpy</span>(g,backup,<span class="keyword">sizeof</span> backup);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;<span class="number">6</span>)cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="奇怪的汉诺塔"><a href="#奇怪的汉诺塔" class="headerlink" title="奇怪的汉诺塔"></a><a href="https://www.acwing.com/problem/content/98/">奇怪的汉诺塔</a></h3><blockquote>
<p>3个塔移动代价是$2^n-1$,四个塔则可以选择一个塔作为媒介，即<br>所求个数代价=当前已经移动个数代价*2+剩下移动个数代价</p>
</blockquote>
<h4 id="code-8"><a href="#code-8" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> d[N],f[N];</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)d[i]=(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">            f[i]=<span class="built_in">min</span>(f[i],f[j]*<span class="number">2</span>+d[i-j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)cout&lt;&lt;f[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="约数之和"><a href="#约数之和" class="headerlink" title="约数之和"></a><a href="https://www.acwing.com/problem/content/description/99/">约数之和</a></h3><blockquote>
<p>首先对A进行分解 $A=p_1^{c_1}p_2^{c_2}…p_n^{c_n}$，<br>那么$A^B=p_1^{Bc_1}p_2^{Bc_2}…p_n^{Bc_n}$<br>约束之和就为$(1+p_1+..+p_1^{Bc_1})..(1+p_n+p_n^2+.+p_n^{Bc_n})$<br>此题因为B特别大，直接枚举肯定会TLE,因此递推枚举即可</p>
</blockquote>
<h4 id="code-9"><a href="#code-9" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">9901</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a%=mod;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!k)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span> (a%mod*<span class="built_in">sum</span>(a,k<span class="number">-1</span>)%mod+<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(a,k/<span class="number">2</span>)%mod*(<span class="number">1</span>+<span class="built_in">qmi</span>(a,k/<span class="number">2</span>+<span class="number">1</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=a;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s++;</span><br><span class="line">            a/=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s)res=res*<span class="built_in">sum</span>(i,b*s)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!a)res=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分形之城"><a href="#分形之城" class="headerlink" title="分形之城"></a><a href="https://www.acwing.com/problem/content/100/">分形之城</a></h3><blockquote>
<p>递推型枚举,N级城市由4个N-1级城市组合而来，对于每一块内的数字存在一定的规律</p>
</blockquote>
<h4 id="code-10"><a href="#code-10" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">int</span> n,A,B;</span><br><span class="line"></span><br><span class="line"><span class="function">PII <span class="title">calc</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n)<span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">1ll</span>&lt;&lt;(n<span class="number">-1</span>),cnt=<span class="number">1ll</span>&lt;&lt;(<span class="number">2</span>*n<span class="number">-2</span>);</span><br><span class="line">    PII pos=<span class="built_in">calc</span>(n<span class="number">-1</span>,m%cnt);</span><br><span class="line">    <span class="type">int</span> x=pos.x,y=pos.y;</span><br><span class="line">    <span class="type">int</span> z=m/cnt;</span><br><span class="line">    <span class="keyword">if</span>(!z)<span class="keyword">return</span> &#123;-y-len,-x+len&#125;;</span><br><span class="line">    <span class="keyword">if</span>(z==<span class="number">1</span>)<span class="keyword">return</span> &#123;x+len,y+len&#125;;</span><br><span class="line">    <span class="keyword">if</span>(z==<span class="number">2</span>)<span class="keyword">return</span> &#123;x+len,y-len&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;y-len,x-len&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;A&gt;&gt;B;</span><br><span class="line">        PII a=<span class="built_in">calc</span>(n,A<span class="number">-1</span>);</span><br><span class="line">        PII b=<span class="built_in">calc</span>(n,B<span class="number">-1</span>);</span><br><span class="line">        <span class="type">double</span> x = a.x-b.x;</span><br><span class="line">        <span class="type">double</span> y = a.y-b.y;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.0lf\n&quot;</span>,<span class="built_in">sqrt</span>(x*x+y*y)*<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h2><blockquote>
<p>前缀和:前面所有数的和<br>差分:当前数与前面这个数的差</p>
</blockquote>
<h3 id="激光炸弹"><a href="#激光炸弹" class="headerlink" title="激光炸弹"></a><a href="https://www.acwing.com/problem/content/101/">激光炸弹</a></h3><blockquote>
<p>二维前缀差分以及容斥原理<br>区域炸弹数量=$f[i][j]-f[i-r][j]-f[i][j-r]+f[i-r][j-r]$</p>
</blockquote>
<h4 id="code-11"><a href="#code-11" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5050</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> n,r;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;r;</span><br><span class="line">    r=<span class="built_in">min</span>(r,<span class="number">5000</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        f[a+<span class="number">1</span>][b+<span class="number">1</span>]+=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;N;j++)</span><br><span class="line">            f[i][j]+=f[i<span class="number">-1</span>][j]+f[i][j<span class="number">-1</span>]-f[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=r;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=r;j&lt;N;j++)</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,f[i][j]-f[i-r][j]-f[i][j-r]+f[i-r][j-r]);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="IncDec序列"><a href="#IncDec序列" class="headerlink" title="IncDec序列"></a><a href="https://www.acwing.com/problem/content/102/">IncDec序列</a></h3><blockquote>
<p>先对原数组进行差分,对$[l,r]$操作就是对l位置操作以及r+1位置进行相反操作</p>
</blockquote>
<h4 id="code-12"><a href="#code-12" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> a[N],d[N],n;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)d[i]=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(d[i]&gt;<span class="number">0</span>)l+=d[i];</span><br><span class="line">        <span class="keyword">else</span> r-=d[i];</span><br><span class="line">    cout&lt;&lt;<span class="built_in">min</span>(l,r)+<span class="built_in">abs</span>(l-r)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">abs</span>(l-r)+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最高的牛"><a href="#最高的牛" class="headerlink" title="最高的牛"></a><a href="https://www.acwing.com/problem/content/103/">最高的牛</a></h3><blockquote>
<p>使得所有牛的身高尽可能高,可以贪心来看,先求每只牛的身高与身高的MAX求取相对值,使得最高的牛身高取上限,其余的牛皆与最高身高求相对值</p>
</blockquote>
<h4 id="code-13"><a href="#code-13" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> n,p,h,m;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; existed;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p&gt;&gt;h&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l,r;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)<span class="built_in">swap</span>(l,r);</span><br><span class="line">        <span class="keyword">if</span>(!existed.<span class="built_in">count</span>(&#123;l,r&#125;))</span><br><span class="line">        &#123;</span><br><span class="line">            existed.<span class="built_in">insert</span>(&#123;l,r&#125;);</span><br><span class="line">            s[l+<span class="number">1</span>]--;</span><br><span class="line">            s[r]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s[i]+=s[i<span class="number">-1</span>];</span><br><span class="line">    <span class="type">int</span> k=s[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s[i]+=-k+h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cout&lt;&lt;s[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><blockquote>
<p>二分通常用来求具有单调性特征的问题</p>
</blockquote>
<h3 id="最佳牛围栏"><a href="#最佳牛围栏" class="headerlink" title="最佳牛围栏"></a><a href="https://www.acwing.com/problem/content/104/">最佳牛围栏</a></h3><blockquote>
<p>二分答案即可</p>
</blockquote>
<h4 id="code-14"><a href="#code-14" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> n,f;</span><br><span class="line"><span class="type">double</span> sum[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)sum[i]=sum[i<span class="number">-1</span>]+s[i]-mid;</span><br><span class="line">    <span class="type">double</span> mins=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=f,j=<span class="number">0</span>;i&lt;=n;i++,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        mins=<span class="built_in">min</span>(mins,sum[j]);</span><br><span class="line">        <span class="keyword">if</span>(sum[i]-mins&gt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;f;</span><br><span class="line">    <span class="type">double</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;s[i];   </span><br><span class="line">        r=<span class="built_in">max</span>(r,(<span class="type">double</span>)s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1e-5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)(r*<span class="number">1000</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="特殊排序"><a href="#特殊排序" class="headerlink" title="特殊排序"></a><a href="https://www.acwing.com/problem/content/115/">特殊排序</a></h3><blockquote>
<p>交互题,根据Query输出题目中的顺序关系</p>
</blockquote>
<h4 id="code-15"><a href="#code-15" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Forward declaration of compare API.</span></span><br><span class="line"><span class="comment">// bool compare(int a, int b);</span></span><br><span class="line"><span class="comment">// return bool means whether a is less than b.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">specialSort</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=(N+<span class="number">1</span>)/<span class="number">2</span>;i;i--)&#123;</span><br><span class="line">            a.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(N-i+<span class="number">1</span>!=i)a.<span class="built_in">push_back</span>(N-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stable_sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),compare);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><blockquote>
<p>题目中的一小部分，不做过多解释</p>
</blockquote>
<h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a><a href="https://www.acwing.com/problem/content/105/">电影</a></h3><blockquote>
<p>记录最大值和次大值</p>
</blockquote>
<h4 id="code-16"><a href="#code-16" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N],b[N],c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i],mp[a[i]]++;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;c[i];</span><br><span class="line">    <span class="type">int</span> ans1=<span class="number">0</span>,ans2=<span class="number">0</span>,id=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans1&lt;mp[b[i]])&#123;</span><br><span class="line">            ans1=mp[b[i]];</span><br><span class="line">            ans2=mp[c[i]];</span><br><span class="line">            id=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ans1==mp[b[i]]&amp;&amp;ans2&lt;mp[c[i]])&#123;</span><br><span class="line">            ans2=mp[c[i]];</span><br><span class="line">            id=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;id&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="货舱选址"><a href="#货舱选址" class="headerlink" title="货舱选址"></a><a href="https://www.acwing.com/problem/content/106/">货舱选址</a></h3><blockquote>
<p>选中位数为最优</p>
</blockquote>
<h4 id="code-17"><a href="#code-17" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;f[i];</span><br><span class="line">    <span class="built_in">nth_element</span>(f,f+n/<span class="number">2</span>,f+n);</span><br><span class="line">    <span class="type">int</span> k=f[n/<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)ans+=<span class="built_in">abs</span>(f[i]-k);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="七夕祭"><a href="#七夕祭" class="headerlink" title="七夕祭"></a><a href="https://www.acwing.com/problem/content/107/">七夕祭</a></h3><p>设行的个数为T，存在四种情况<br>对于相等的两者都满足的情况$(T|n==0,T|m==0)$<br>对于满足行不满足列的情况$(T|n==0,T|m!=0)$<br>对于满足列不满足行的情况$(T|n!=0,T|m==0)$<br>两者都不满足的情况(T|n!=0,T|m!=0)<br>计算时采用贪心来求解</p>
<h4 id="code-18"><a href="#code-18" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> row[N],col[N],s[N],c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">work</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    <span class="keyword">if</span>(s[n]%n)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    c[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ave=s[n]/n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)c[i]=s[i<span class="number">-1</span>]-(i<span class="number">-1</span>)*ave;</span><br><span class="line">    <span class="built_in">sort</span>(c+<span class="number">1</span>,c+<span class="number">1</span>+n);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)res+=<span class="built_in">abs</span>(c[i]-c[(n+<span class="number">1</span>)/<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,t;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        row[x]++,col[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> r=<span class="built_in">work</span>(n,row);</span><br><span class="line">    <span class="type">int</span> c=<span class="built_in">work</span>(m,col);</span><br><span class="line">    <span class="keyword">if</span>(r!=<span class="number">-1</span>&amp;&amp;c!=<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;both %lld&quot;</span>,r+c);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r!=<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;row %lld&quot;</span>,r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c!=<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;column %lld&quot;</span>,c);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态中位数"><a href="#动态中位数" class="headerlink" title="动态中位数"></a><a href="https://www.acwing.com/problem/content/108/">动态中位数</a></h3><blockquote>
<p>用大根堆和小根堆维护</p>
</blockquote>
<h4 id="code-19"><a href="#code-19" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T,x,n;</span><br><span class="line">    std::cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;n;</span><br><span class="line">        cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;(n+<span class="number">1</span>)/<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt;down;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt;up;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="keyword">if</span>(down.<span class="built_in">empty</span>()||x&lt;=down.<span class="built_in">top</span>())down.<span class="built_in">push</span>(x);</span><br><span class="line">            <span class="keyword">else</span> up.<span class="built_in">push</span>(x);</span><br><span class="line">            <span class="keyword">if</span>(down.<span class="built_in">size</span>()&gt;up.<span class="built_in">size</span>()+<span class="number">1</span>)up.<span class="built_in">push</span>(down.<span class="built_in">top</span>()),down.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(up.<span class="built_in">size</span>()&gt;down.<span class="built_in">size</span>())down.<span class="built_in">push</span>(up.<span class="built_in">top</span>()),up.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>)&#123;</span><br><span class="line">                cout&lt;&lt;down.<span class="built_in">top</span>()&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(++cnt%<span class="number">10</span>==<span class="number">0</span>)cout&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt%<span class="number">10</span>)cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="超快速排序"><a href="#超快速排序" class="headerlink" title="超快速排序"></a><a href="https://www.acwing.com/problem/content/109/">超快速排序</a></h3><blockquote>
<p>逆序对的数量</p>
</blockquote>
<h4 id="code-20"><a href="#code-20" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">500005</span>;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="type">int</span> idx,a[N],s[N],n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x-=x&amp;-x)res+=s[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=idx;x+=x&amp;-x)s[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n,n)&#123;</span><br><span class="line">        idx=<span class="number">0</span>;</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i],mp[a[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> [u,v]:mp)mp[u]=++idx;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=idx;i++)s[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--)&#123;</span><br><span class="line">            ans+=<span class="built_in">ask</span>(mp[a[i]]<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">add</span>(mp[a[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="奇数码问题"><a href="#奇数码问题" class="headerlink" title="奇数码问题"></a><a href="https://www.acwing.com/problem/content/110/">奇数码问题</a></h3><blockquote>
<p>判断逆序对的数量奇偶性是否相同即可</p>
</blockquote>
<h4 id="code-21"><a href="#code-21" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> n):<span class="built_in">n</span>(n),<span class="built_in">v</span>(n)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x-=x&amp;-x)res+=v[x<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;x&lt;n;x+=x&amp;-x)v[x<span class="number">-1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n*n),<span class="built_in">b</span>(n*n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a)cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:b)cin&gt;&gt;x;</span><br><span class="line">        <span class="function">BIT <span class="title">A</span><span class="params">(n*n)</span>,<span class="title">B</span><span class="params">(n*n)</span></span>;</span><br><span class="line">        <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x:a)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)<span class="keyword">continue</span>;</span><br><span class="line">            ans1+=A.<span class="built_in">ask</span>(x);</span><br><span class="line">            A.<span class="built_in">add</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x:b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)<span class="keyword">continue</span>;</span><br><span class="line">            ans2+=B.<span class="built_in">ask</span>(x);</span><br><span class="line">            B.<span class="built_in">add</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((ans1&amp;<span class="number">1</span>)==(ans2&amp;<span class="number">1</span>))cout&lt;&lt;<span class="string">&quot;TAK&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NIE&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法竞赛进阶指南</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2022/02/08/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><h3 id="洛谷p1352"><a href="#洛谷p1352" class="headerlink" title="洛谷p1352"></a>洛谷p1352</h3><h4 id="简单版本"><a href="#简单版本" class="headerlink" title="简单版本"></a>简单版本</h4><blockquote>
<p>树形DP的常规套路，考虑子节点对父节点的影响即可</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n,x,w[N],f[N][<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>]=w[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:v[u])<span class="built_in">dfs</span>(x),f[u][<span class="number">1</span>]+=f[x][<span class="number">0</span>],f[u][<span class="number">0</span>]+=<span class="built_in">max</span>(f[x][<span class="number">1</span>],f[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i];</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(f[<span class="number">1</span>][<span class="number">1</span>],f[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="升级版-背包-树形DP"><a href="#升级版-背包-树形DP" class="headerlink" title="升级版(背包+树形DP)"></a>升级版(背包+树形DP)</h4><blockquote>
<p>相较于简单版本，对物品容量增加了限制<br>对于父节点，每次遍历子节点，并对子节点做一次背包</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> n,x,w[N],f[N][N][<span class="number">2</span>],m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:v[u])&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                f[u][i][<span class="number">0</span>]=<span class="built_in">max</span>(f[u][i][<span class="number">0</span>],f[u][i-j][<span class="number">0</span>]+<span class="built_in">max</span>(f[x][j][<span class="number">0</span>],f[x][j][<span class="number">1</span>]));</span><br><span class="line">                f[u][i][<span class="number">1</span>]=<span class="built_in">max</span>(f[u][i][<span class="number">1</span>],f[u][i-j][<span class="number">1</span>]+f[x][j][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=m;i;i--)f[u][i][<span class="number">1</span>]=<span class="built_in">max</span>(f[u][i][<span class="number">1</span>],f[u][i<span class="number">-1</span>][<span class="number">1</span>]+w[u]);</span><br><span class="line">    f[u][<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i];</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(f[<span class="number">1</span>][m][<span class="number">1</span>],f[<span class="number">1</span>][m][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="换根DP"><a href="#换根DP" class="headerlink" title="换根DP"></a>换根DP</h2><blockquote>
<p> 换根DP经典题目套路，通常第一遍dfs1算出子节点对父节点的影响，第二次dfs算出父节点对子节点的影响。 </p>
</blockquote>
<h3 id="codeforces-1187-E"><a href="#codeforces-1187-E" class="headerlink" title="codeforces 1187 E"></a>codeforces 1187 E</h3><blockquote>
<p>Ⅰ 在该题中对于每个点$u$利用dfs的遍历顺序算出子节点对于该点的影响，并存于f[u]中，此时就有$f[u]=\sum\limits_{x\in u}f[x]$<br>Ⅱ 在第二次dfs时，算出父节点对于子节点的贡献w[x],此时每次遍历时，求得的父节点价值为w[u],可以求得子节点的价值为w[x]=w[u]+f[u]-f[x]-sz[x]+n-sz[x]<br>III 最后一步为求父节点和子节点总价值，即可求得该点的Max值，求所有点的Max中的Max即可。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;PII;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> n,a,b,f[<span class="number">200005</span>],sz[<span class="number">200005</span>],w[<span class="number">200005</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	st[u]=<span class="literal">true</span>;</span><br><span class="line">	sz[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:v[u])</span><br><span class="line">		<span class="keyword">if</span>(!st[x])&#123;</span><br><span class="line">			<span class="built_in">dfs1</span>(x);</span><br><span class="line">			sz[u]+=sz[x];</span><br><span class="line">			f[u]+=f[x];</span><br><span class="line">		&#125;</span><br><span class="line">	f[u]+=sz[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	st[u]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:v[u])</span><br><span class="line">		<span class="keyword">if</span>(!st[x])&#123;</span><br><span class="line">			w[x]=w[u]+f[u]-f[x]-sz[x]+n-sz[x];</span><br><span class="line">			<span class="built_in">dfs2</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		v[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">		v[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans=<span class="built_in">max</span>(ans,f[i]+w[i]);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//	ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//  cin.tie(nullptr);</span></span><br><span class="line">	<span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//	cin&gt;&gt;T;</span></span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h2><blockquote>
<p>数位dp经典做题方法，init的初始化时数位dp的一大经典特色，其次就是分析啦</p>
</blockquote>
<h3 id="CodeForce1036C-Classy-Numbers"><a href="#CodeForce1036C-Classy-Numbers" class="headerlink" title="CodeForce1036C Classy Numbers"></a>CodeForce1036C Classy Numbers</h3><blockquote>
<p>此题题意，在$[l,r]$中，找出非0数不超过3的数的个数</p>
</blockquote>
<h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><blockquote>
<p>可以定义一个数组$f[n][m][s]$，其中n为数位个数，m为第i位的数，s为非0的数字个数。在做完init之后，剩下的就是进行dp分解了，根据闫氏dp分析法，从高位向低位递推，对于第i位分为$[0,a_i-1],a_i$两种情况，我们只需算第一种情况，同时，每次算时，需一个last值记录非0数的个数对后续dp的影响，在最后判断等于这个数时是否满足，根据情况进行加减</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     a[n]  第n位</span><br><span class="line">     / \</span><br><span class="line">    /   \</span><br><span class="line">0~a[n]-1  a[n-1]</span><br><span class="line">         / \</span><br><span class="line">        /   \</span><br><span class="line"> 0~a[n-1]-1  ...</span><br><span class="line">             / \</span><br><span class="line">            /   \</span><br><span class="line">       0~a[0]-1 a[0]</span><br></pre></td></tr></table></figure>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> l,r,f[<span class="number">20</span>][<span class="number">10</span>][<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)f[<span class="number">1</span>][i][i!=<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">9</span>;k++)&#123;</span><br><span class="line">				f[i][j][<span class="number">4</span>]+=f[i<span class="number">-1</span>][k][<span class="number">4</span>];</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;=<span class="number">3</span>;u++)&#123;</span><br><span class="line">					f[i][j][u+(j!=<span class="number">0</span>)]+=f[i<span class="number">-1</span>][k][u];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;nums;</span><br><span class="line">	<span class="keyword">while</span>(n)nums.<span class="built_in">push_back</span>(n%<span class="number">10</span>),n/=<span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> last=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=nums.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">		<span class="type">int</span> x=nums[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=(i==nums.<span class="built_in">size</span>());j&lt;x;j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">3</span>;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(k+last&lt;=<span class="number">3</span>)res+=f[i+<span class="number">1</span>][j][k];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		last+=(x!=<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(last&lt;=<span class="number">3</span>)res++;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		cout&lt;&lt;<span class="built_in">dp</span>(r)-<span class="built_in">dp</span>(l<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="状态压缩dp"><a href="#状态压缩dp" class="headerlink" title="状态压缩dp"></a>状态压缩dp</h2><blockquote>
<p>状态压缩dp的难点在于对于二进制的理解</p>
</blockquote>
<h3 id="Codeforce-1238-E-Keyboard-Purchase"><a href="#Codeforce-1238-E-Keyboard-Purchase" class="headerlink" title="Codeforce 1238 E.Keyboard Purchase"></a>Codeforce 1238 E.Keyboard Purchase</h3><blockquote>
<p>寻找出最小的排列代价，使得$\sum{|pos<em>i-pos</em>{i-1}|}$最小</p>
</blockquote>
<h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><blockquote>
<p>预处理出g数组(相邻字母的每个种类个数),因为m&lt;=20,可以对其进行二进制枚举，对于每次枚举,当前状况必定由前一状态得来,此次新的枚举，其代价是前一状态的代价加上$\sum\limits<em>{j\in算过}\sum\limits</em>{k\in未算}g[j][k]$</p>
</blockquote>
<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> g[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">1</span>&lt;&lt;<span class="number">20</span>];</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	cin&gt;&gt;s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)g[s[i<span class="number">-1</span>]-<span class="string">&#x27;a&#x27;</span>][s[i]-<span class="string">&#x27;a&#x27;</span>]++,g[s[i]-<span class="string">&#x27;a&#x27;</span>][s[i<span class="number">-1</span>]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">	f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=j+<span class="number">1</span>;k&lt;m;k++)</span><br><span class="line">				<span class="keyword">if</span>((i&gt;&gt;j&amp;<span class="number">1</span>)^(i&gt;&gt;k&amp;<span class="number">1</span>))</span><br><span class="line">					sum+=g[j][k];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">			<span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)</span><br><span class="line">				f[i]=<span class="built_in">min</span>(f[i-(<span class="number">1</span>&lt;&lt;j)]+sum,f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;f[(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法入门</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 641 (Div. 2)</title>
    <url>/2022/03/17/cf641-2/</url>
    <content><![CDATA[<p>$gcd(lcm({a_i,a_j})|i&lt;j)$</p>
<p>$gcd(lcm(a<em>1,a_2)…lcm(a_1,a_x)…lcm(a</em>{x-1},a_x))$</p>
<p>$gcd_1=gcd(lcm(a_1,a_2),lcm(a_1,a_3)…lcm(a_1,a_x))$</p>
<p>$gcd_1=lcm(a_1,gcd(a_2,a_3…a_x))$</p>
<p>$…$</p>
<p>$gcd((lcm({a_i,a_j})|i&lt;j)=gcd(gcd_1,gcd_2…gcd_x)$</p>
]]></content>
  </entry>
  <entry>
    <title>操作系统概念精要</title>
    <url>/2022/02/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h1><h2 id="操作系统的功能"><a href="#操作系统的功能" class="headerlink" title="操作系统的功能"></a>操作系统的功能</h2><blockquote>
<p>计算机系统粗分为四个组件:硬件，操作系统，应用程序和用户<br>计算机系统可以分为硬件，软件和数据。</p>
</blockquote>
<p>从两个视角探讨操作系统:用户视角,系统视角</p>
<h3 id="用户视角"><a href="#用户视角" class="headerlink" title="用户视角"></a>用户视角</h3><p>操作系统设计的的目的是用户的使用方便,次要的是性能,不在乎的是资源利用</p>
<h3 id="系统视角"><a href="#系统视角" class="headerlink" title="系统视角"></a>系统视角</h3><p>…..<br>操作系统为资源分配器，操作系统是个控制程序,控制程序管理用户程序的执行</p>
<h3 id="操作系统的定义"><a href="#操作系统的定义" class="headerlink" title="操作系统的定义"></a>操作系统的定义</h3><p>操作系统是一直运行在计算机上的程序(通常称为内核)</p>
<h2 id="计算机系统的组成"><a href="#计算机系统的组成" class="headerlink" title="计算机系统的组成"></a>计算机系统的组成</h2><h2 id="计算机系统的体系结构"><a href="#计算机系统的体系结构" class="headerlink" title="计算机系统的体系结构"></a>计算机系统的体系结构</h2><p>移步☞<a href="http://blog-chen.com/2022/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/">计算机组成原理</a></p>
<h2 id="操作系统的结构"><a href="#操作系统的结构" class="headerlink" title="操作系统的结构"></a>操作系统的结构</h2><p>操作系统的最重要一点是具有躲到程序能力。单个用户通常具有多个运行程序。多道程序设计通过安排作业使得CPu总有一个执行作业,从而提高CPU的利用率</p>
<h2 id="操作系统的执行"><a href="#操作系统的执行" class="headerlink" title="操作系统的执行"></a>操作系统的执行</h2><p>线代操作系统是中驱驱动的.事件总是由中断或者陷阱引起的。</p>
<h3 id="双重模式与多重模式的执行"><a href="#双重模式与多重模式的执行" class="headerlink" title="双重模式与多重模式的执行"></a>双重模式与多重模式的执行</h3><p>操作系统的正确运行，至少需要两种单独运行模式:用户模式和内核模式,系统模式或特权模式。计算机硬件可以通过一个模式位来表示当前模式:内核模式(0)和用户模式(1).将可能引起损害的机器指令作为特权指令.</p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>操作系统应该维持控制CPU，防止用户程序陷入死循环,或不调用系统服务并且不将控制返给操作系统,为了实现这一目标,可以使用定时器.</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h1 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h1><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h2>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机知识</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2022/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机知识</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/02/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="第一章·概述"><a href="#第一章·概述" class="headerlink" title="第一章·概述"></a>第一章·概述</h2><h3 id="计算机网络在信息时代中的作用"><a href="#计算机网络在信息时代中的作用" class="headerlink" title="计算机网络在信息时代中的作用"></a>计算机网络在信息时代中的作用</h3><ul>
<li>三网融合指:电信网络,有线电视网络,计算机网络</li>
<li>互联网的两大特点: 连通性和共享性</li>
</ul>
<h3 id="互联网概述"><a href="#互联网概述" class="headerlink" title="互联网概述"></a>互联网概述</h3><h4 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a>网络的网络</h4><ul>
<li>计算机网络: 由若干节点和连接这些节点的链路组成</li>
<li>网络把许多计算机连接在一起,而互联网则把许多网络通过一些路由器连接在一起,与网络相连的计算机常称为主机.</li>
</ul>
<h4 id="互联网基础结构发展的三个阶段"><a href="#互联网基础结构发展的三个阶段" class="headerlink" title="互联网基础结构发展的三个阶段"></a>互联网基础结构发展的三个阶段</h4><ul>
<li>1969 – 1990 从单个网络 ARPANET 向互联网发展。<blockquote>
<p>1983 年为互联网的诞生时间。</p>
</blockquote>
</li>
<li>1985 – 1993 建成了三级结构的互联网 。</li>
<li>1993 – 现在 全球范围的多层次 <code>ISP(互联网网络服务提供者/Internet Service Provider)</code> 结构的互联网。</li>
</ul>
<h4 id="互联网的标准化工作"><a href="#互联网的标准化工作" class="headerlink" title="互联网的标准化工作"></a>互联网的标准化工作</h4><ul>
<li>RFC文档建立阶段<blockquote>
<p>1)互联网草案<br>2)建议标准<br>3)互联网标准</p>
</blockquote>
</li>
</ul>
<h3 id="互联网组成"><a href="#互联网组成" class="headerlink" title="互联网组成"></a>互联网组成</h3><p>1)<code>边缘部分</code>:由所有连接在互联网上的主机组成。这部分是用户直接使用的,用来进行通信和资源共享。<br>2)<code>核心部分</code>:有大量网络和连接这些网络的路由器组成.这部分是为边缘部分提供服务的</p>
<h4 id="互联网的边缘部分"><a href="#互联网的边缘部分" class="headerlink" title="互联网的边缘部分"></a>互联网的边缘部分</h4><ul>
<li>端系统:连接在互联网边缘部分的所有主机(大型计算机常被称为服务器)</li>
<li>计算机之间的通信:<code>主机A的某个进程和主机B上的另一个进程进行通信.</code></li>
<li>端系统之间的通信方式:<code>客户-服务器方式(C/S方式)和对等方式(P2P方式).</code></li>
</ul>
<h4 id="互联网的核心部分"><a href="#互联网的核心部分" class="headerlink" title="互联网的核心部分"></a>互联网的核心部分</h4><blockquote>
<p>在网络核心部分其特殊作用的是路由器,路由器是实现分组交换的关键构件,其任务是转发收到的分组。</p>
</blockquote>
<h4 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h4><ul>
<li>电路交换<blockquote>
<p>在通话的全部时间内,通话的两个用户始终占用端到端的资源,路线传输效率很低</p>
</blockquote>
</li>
<li>分组交换<blockquote>
<p>分组交换技术采用储存转发技术。在计算机网络中,主机是为用户进行信息处理的,路由器则用来转发分组。</p>
</blockquote>
</li>
</ul>
<h3 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h3><h4 id="计算机网络的定义-未统一"><a href="#计算机网络的定义-未统一" class="headerlink" title="计算机网络的定义(未统一)"></a>计算机网络的定义(未统一)</h4><p>计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</p>
<h4 id="几种不同类别的计算机网络"><a href="#几种不同类别的计算机网络" class="headerlink" title="几种不同类别的计算机网络"></a>几种不同类别的计算机网络</h4><ul>
<li>按网络作用范围<blockquote>
<p>(1)<code>广域网WAN (Wide Area Network)</code>通常为几十到几千公里。有时也称为远程网(long haul network)。是互联网的核心部分。<br>(2)<code>城域网MAN(Metropolitan Area Network)</code>作用范围一般是一个城市，作用距离约为 5~50 公里。<br>(3)<code>局域网LAN(Local Area Network)</code>局限在较小的范围（如 1 公里左右）。通常采用高速通信线路。<br>(4)<code>个人区域网PAN(Personal Area Network)</code>范围很小，大约在 10 米左右。有时也称为无线个人区域网 WPAN (Wireless PAN)。</p>
</blockquote>
</li>
</ul>
<p><code>若中央处理机之间的距离非常近（如仅 1 米甚至更小些），则一般就称之为多处理机系统，而不称它为计算机网络。</code></p>
<ul>
<li>按网络使用者分<blockquote>
<p><code>公用网(public network)</code>按规定交纳费用的人都可以使用的网络。也可称为公众网。<br><code>专用网(private network)</code>为特殊业务工作的需要而建造的网络。</p>
</blockquote>
</li>
<li>用来把用户接入到互联网的网络<blockquote>
<p><code>接入网(Access Network)</code>用于将用户接入互联网。</p>
</blockquote>
</li>
</ul>
<h3 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h3><h4 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h4><ul>
<li>速率<blockquote>
<p>单位时间传输的单个二进制数字个数</p>
</blockquote>
</li>
<li>带宽(时域&amp;频域)<blockquote>
<p>一条通信链路的“带宽”越宽，其所能传输的“最高数据率”也越高。</p>
</blockquote>
</li>
<li>吞吐量<blockquote>
<p>单位时间内通过某个网络（或信道、接口）的实际数据量。</p>
</blockquote>
</li>
<li><p>时延</p>
<blockquote>
<p><code>发送时延</code>主机或路由器发送数据帧数所需要的时间<br><code>传播时延</code>电磁波在信道中传播一定的距离需要花费的时间<br>处理时延<br>排队时延</p>
</blockquote>
<p>  总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</p>
</li>
<li><p>时延带宽积</p>
<blockquote>
<p>时延带宽积 = 传播时延 ✖ 带宽</p>
</blockquote>
</li>
<li><p>往返时间RTT</p>
</li>
<li><p>利用率</p>
<blockquote>
<p>$D$为当前时延,U为利用率,$D_0$空闲时延<br>$D=\frac{D_0}{1-U}$</p>
</blockquote>
</li>
<li><p>计算机网络的非性能特征</p>
<blockquote>
<p>费用、质量、标准化、可靠性、可扩展性和可升级性、易于管理和维护</p>
</blockquote>
</li>
</ul>
<h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><p><code>OSI标准 TCP/IP标准</code></p>
<h4 id="协议与划分层次"><a href="#协议与划分层次" class="headerlink" title="协议与划分层次"></a>协议与划分层次</h4><blockquote>
<p>计算机网络的各层及其（ ）的集合就是网络的体系结构</p>
</blockquote>
<ul>
<li><p><code>网络协议 (network protocol)</code>，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。</p>
</li>
<li><p>三个组成要素:</p>
<blockquote>
<p>①语法：数据与控制信息的结构或格式 。<br>②语义：需要发出何种控制信息，完成何种动作以及做出何种响应。<br>③同步：事件实现顺序的详细说明。 </p>
</blockquote>
</li>
<li>分层优点<blockquote>
<p>各层之间是独立的,灵活性好,结构上可分割开,易于实现和维护,能促进标准化工作。</p>
</blockquote>
</li>
<li>各层主要功能<blockquote>
<p><code>差错控制</code>：使相应层次对等方的通信更加可靠。<br><code>流量控制</code>：发送端的发送速率必须使接收端来得及接收，不要太快。<br><code>分段和重装</code>：发送端将要发送的数据块划分为更小的单位，在接收端将其还原。<br><code>复用和分用</code>：发送端几个高层会话复用一条低层的连接，在接收端再进行分用。<br><code>连接建立和释放</code>：交换数据前先建立一条逻辑连接，数据传送结束后释放连接。</p>
</blockquote>
</li>
</ul>
<h4 id="具有五层协议的体系结构"><a href="#具有五层协议的体系结构" class="headerlink" title="具有五层协议的体系结构"></a>具有五层协议的体系结构</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">OSI</th>
<th style="text-align:center">TCP/IP</th>
<th style="text-align:center">五层协议</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">应用层</td>
</tr>
<tr>
<td style="text-align:center">表示层</td>
<td style="text-align:center">应用层</td>
<td style="text-align:center">应用层</td>
</tr>
<tr>
<td style="text-align:center">会话层</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">运输层</td>
<td style="text-align:center">运输层</td>
<td style="text-align:center">运输层</td>
</tr>
<tr>
<td style="text-align:center">网络层</td>
<td style="text-align:center">网络层</td>
<td style="text-align:center">网络层</td>
</tr>
<tr>
<td style="text-align:center">数据链路层</td>
<td style="text-align:center">链路层(网络接口层)</td>
<td style="text-align:center">数据链路层</td>
</tr>
<tr>
<td style="text-align:center">物理层</td>
<td style="text-align:center"></td>
<td style="text-align:center">物理层</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>应用层</p>
<blockquote>
<p>应用层的任务:通过应用进程间的交互来完成特定网络应用。<br>应用层协议的定义:应用进程间通信和交互的规则<br>应用层交互数据单元称为报文</p>
</blockquote>
</li>
<li><p>运输层</p>
<blockquote>
<p>运输层的任务:向两台主机中进程之间的通信提供通用的数据传输服务  </p>
</blockquote>
<p>  主要使用两种协议:</p>
<blockquote>
<p><code>传输控制协议TCP</code>:提供面向连接的,可靠的数据传输服务,其数据传输的单位是报文段<br><code>用户数据报协议UDP</code>:提供无连接的尽最大努力的数据传输服务,其数据传输的单位是用户数据段</p>
</blockquote>
</li>
<li><p>网络层</p>
<blockquote>
<p>网络层协议是:无连接的网际协议 IP  (Internet Protocol) 和许多路由选择协议<br>IP 协议分组也叫做 IP 数据报，或简称为数据报。</p>
</blockquote>
</li>
<li><p>数据链路层</p>
<blockquote>
<p>实现两个相邻节点之间的可靠通信。</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>物理层</p>
<blockquote>
<p>确定连接电缆的插头应当有多少根引脚，以及各引脚应如何连接。</p>
</blockquote>
</li>
</ul>
<p><img src="/image/jiwang/Net.png" alt="数据在各层间的传递"></p>
<h4 id="实体，协议，服务和服务访问点"><a href="#实体，协议，服务和服务访问点" class="headerlink" title="实体，协议，服务和服务访问点"></a>实体，协议，服务和服务访问点</h4><blockquote>
<p><code>实体</code> (entity) ：表示任何可发送或接收信息的硬件或软件进程。<br><code>协议</code>：控制两个对等实体进行通信的规则的集合。<br>在协议的控制下，两个对等实体间的通信使得本层能够<code>向上一层提供服务</code>。<br>要实现本层协议，还需要使用<code>下层所提供的服务</code>。</p>
</blockquote>
<p>协议是水平的,服务是垂直的</p>
<blockquote>
<p>在同一系统中相邻两层的实体进行交互（即交换信息） 的地方，通常称为服务访问点 SAP (Service Access Point)。<br>SAP 是一个抽象的概念，它实际上就是一个逻辑接口。<br>OSI 把层与层之间交换的数据的单位称为服务数据单元 SDU (Service Data Unit)。<br>SDU 可以与 PDU 不一样。</p>
</blockquote>
<h4 id="TCP-IP的体系结构"><a href="#TCP-IP的体系结构" class="headerlink" title="TCP/IP的体系结构"></a>TCP/IP的体系结构</h4><blockquote>
<p>路由器在转发分组时最高只用到网际层，没有使用运输层和应用层。</p>
</blockquote>
<hr>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><p>  物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输的<code>数据比特流</code>,而不是指具体的传输媒体。</p>
<p>  <code>作用:尽可能屏蔽掉不同传输媒体和通信手段的差异</code></p>
<p>  用于物理层的协议也常被称为物理层的规程.</p>
<p>  确定与传输媒体的接口的一些特性。4 个特性：</p>
<blockquote>
<p>机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等。<br>电气特性：指明在接口电缆的各条线上出现的电压的范围。<br>功能特性：指明某条线上出现的某一电平的电压的意义。<br>过程特性：指明对于不同功能的各种可能事件的出现顺序。</p>
</blockquote>
<p><code>数据在计算机中多采用并行传输</code>，但<code>数据在通信线路上的传输方式一般都是串行传输</code>。即逐个比特按照时间顺序传输。因此物理层还要完成传输方式的转换。</p>
<p><img src="/image/jiwang/2_1_1.png" alt="串并行"></p>
<h3 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h3><h4 id="数据通信系统的模型"><a href="#数据通信系统的模型" class="headerlink" title="数据通信系统的模型"></a>数据通信系统的模型</h4><p> 一个数据通信系统课划分为三大部分，<code>源系统（或发送端、发送方）、传输系统（或传输网络）和目的系统（或接收端、接收方）</code></p>
<blockquote>
<p>源系统包括:源点,发送器<br>目的系统:接收器,终点</p>
</blockquote>
<p><em>常用术语</em></p>
<blockquote>
<p>消息(message)：如话音、文字、图像、视频等。<br>数据 (data)： 运送消息的实体。有意义的符号序列。<br>信号 (signal)：数据的电气的或电磁的表现。<br> 模拟信号 (analogous signal)：代表消息的参数的取值是连续的。<br> 数字信号 (digital signal)：代表消息的参数的取值是离散的。<br>码元：在使用时间域（简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p>
</blockquote>
<h4 id="有关信道的几个基本概念"><a href="#有关信道的几个基本概念" class="headerlink" title="有关信道的几个基本概念"></a>有关信道的几个基本概念</h4><blockquote>
<p>信道:一般用来表示向某一个方向传送信息的媒体。</p>
</blockquote>
<p>从通信双方信息交互的方式,有以下三种基方式:</p>
<p><code>单向通信（单工通信）</code>：只能有一个方向的通信，没有反方向的交互。<br><code>双向交替通信（半双工通信）</code>：通信的双方都可以发送信息，但双方不能同时发送（当然也就不能同时接收）。<br><code>双向同时通信（全双工通信）</code>：通信的双方可以同时发送和接收信息。 </p>
<pre><code>基带信号(基本频带信号):来自信源的信号
调制:
基带调制(编码)
带通调制(仅在一段频率范围内能够通过信道)
</code></pre><ul>
<li>常用编码方式</li>
</ul>
<p><img src="/image/jiwang/2_1_3.png" alt="编码方式"></p>
<ul>
<li>不归零制：正电平代表 1，负电平代表 0。</li>
<li>归零制：正脉冲代表 1，负脉冲代表 0。</li>
<li>曼彻斯特编码：位周期中心的向上跳变代表 0，位周期中心的向下跳变代表 1。但也可反过来定义。</li>
<li>差分曼彻斯特编码：在每一位的中心处始终都有跳变。位开始边界有跳变代表 0，而位开始边界没有跳变代表 1。</li>
</ul>
<p>信号频率：<br>&emsp;&emsp;曼彻斯特编码和差分曼彻斯特编码产生的信号频率比不归零制高。<br>自同步能力：<br>&emsp;&emsp;不归零制不能从信号波形本身中提取信号时钟频率（这叫做没有自同步能力）。<br>&emsp;&emsp;曼彻斯特编码和差分曼彻斯特编码具有自同步能力。</p>
<ul>
<li><p>基本的带通调制方法</p>
<p>  调幅,调频，调相</p>
</li>
</ul>
<h4 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h4><pre><code>任何实际的信道都不是理想的，都不可能以任意高的速率进行传送。
码元传输的速率越高，或信号传输的距离越远，或噪声干扰越大，或传输媒体质量越差，在接收端的波形的失真就越严重。
</code></pre><p>限制码元在信道上的传输速率的两个因素：<code>信道能够通过的频率范围</code>，<code>信噪比</code>。</p>
<ul>
<li>信道能够通过的频率范围</li>
</ul>
<p>具体的信道所能通过的频率范围总是有限的。信号中的许多高频分量往往不能通过信道</p>
<p>码间串扰：接收端收到的信号波形失去了码元之间的清晰界限。</p>
<blockquote>
<p>奈氏准则 $B=2*W$<br> 极限值B与信道带宽W</p>
<p>奈奎斯特公式 $C=2<em>W</em>\log_2n$<br>    N是携带数据的码元可能取的离散值的个数；<br>    C是该信道最大的数据传输速率。</p>
</blockquote>
<ul>
<li>信噪比</li>
</ul>
<p>信噪比$(dB) = 10 log10(\frac{S}{N} ) (dB) $</p>
<p>香农公式 $C = W \log_2(1+\frac{S}{N})  (bit/s) $</p>
<p>香农公式表明:<code>信道的带框在信道中的噪声比越大,信息的极限传输速率越高</code>。</p>
<p>提高信息传输速率的方法:<code>用编码的方法让每一个码元携带更多比特的信息量</code>。</p>
<p>奈氏准则与香农公式的意义:</p>
<blockquote>
<p>奈氏准则：激励工程人员不断探索更加先进的编码技术，使每一个码元携带更多比特的信息量。</p>
<p>香农公式：告诫工程人员，在实际有噪声的信道上，不论采用多么复杂的编码技术，都不可能突破信息传输速率的绝对极限。</p>
</blockquote>
<h3 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h3><p>传输媒体是数据传输系统中在发送器和接收器之间的<code>物理通路</code></p>
<h4 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h4><ul>
<li><p>双绞线:</p>
<blockquote>
<p>把两根互相绝缘的铜导线并排放在一起，然后用规则的方法绞合 (twist) 起来就构成了双绞线。<br>性质:<code>绞合度越高,可用的传输率越高</code><br>类别:无屏蔽双绞线(UTP),屏蔽双绞线(STP)</p>
</blockquote>
</li>
<li><p>同轴电缆</p>
<blockquote>
<p>由内导体铜质芯线（单股实心线或多股绞合线）、绝缘层、网状编织的外导体屏蔽层（也可以是单股的）以及保护塑料外层所组成。具有很好的抗干扰特性，被广泛用于传输较高速率的数据</p>
</blockquote>
</li>
<li><p>光缆</p>
<blockquote>
<p>由发送端,光源和接收端组成<br>多模光纤(易失真)，单模光纤(价格贵)</p>
</blockquote>
<p>  光纤优点:</p>
<pre><code>  (1) 通信容量非常大
  (2) 传输损耗小，中继距离长，对远距离传输特别经济。
  (3) 抗雷电和电磁干扰性能好。
  (4) 无串音干扰，保密性好，不易被窃听或截取数据。
  (5) 体积小，重量轻。
</code></pre></li>
</ul>
<h4 id="非导引型媒体"><a href="#非导引型媒体" class="headerlink" title="非导引型媒体"></a>非导引型媒体</h4><p>利用无线电波在自由空间的传播可较快地实现多种通信，因此将自由空间称为“非导引型传输媒体”</p>
<p>多径效应</p>
<blockquote>
<p>基站发出的信号可以经过多个障碍物的数次反射，从多条路径、按不同时间到达接收方。多条路径的信号叠加后一般都会产生很大的失真，这就是所谓的多径效应。</p>
</blockquote>
<h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><h4 id="频分复用-时分复用和统计时分复用"><a href="#频分复用-时分复用和统计时分复用" class="headerlink" title="频分复用,时分复用和统计时分复用"></a>频分复用,时分复用和统计时分复用</h4><p>复用 (multiplexing) ：允许用户使用一个共享信道进行通信。</p>
<p><em>频分复用</em></p>
<blockquote>
<p>所有用户在同样的时间占用不同的带宽（即频带）资源。</p>
</blockquote>
<p><em>时分复用</em></p>
<blockquote>
<p>所有用户在不同的时间占用同样的频带宽度</p>
</blockquote>
<p>频分多址与时分多址</p>
<blockquote>
<p>频分多址:可让 N 个用户各使用一个频带，或让更多的用户轮流使用这 N 个频带。这种方式称为频分多址接入 FDMA (Frequency Division Multiple Access)，简称为频分多址<br>时分多址:可让 N 个用户各使用一个时隙，或让更多的用户轮流使用这 N 个时隙。这种方式称为时分多址接入 TDMA (Time Division Multiple Access)，简称为时分多址。</p>
</blockquote>
<p><em>统计时分复用</em></p>
<blockquote>
<p>动态分配时隙</p>
</blockquote>
<h4 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h4><blockquote>
<p>波分复用 WDM (Wavelength Division Multiplexing) ：就是光的频分复用。使用一根光纤来同时传输多个光载波信号。</p>
</blockquote>
<h4 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h4><p>每一个用户可以在<code>同样的时间</code>使用<code>同样的频带</code>进行通信。<br>各用户使用经过特殊挑选的不同码型，因此不会造成干扰。<br>当<code>码分复用 CDM</code> (Code Division Multiplexing) 信道为多个不同地址的用户所共享时，就称为<code>码分多址 CDMA</code> (Code Division Multiple Access)。</p>
<p>CMDA工作原理</p>
<blockquote>
<p>将每一个比特时间划分为 m 个短的间隔，称为码片 (chip)。</p>
</blockquote>
<p>计算</p>
<blockquote>
<p>设站码片序列为A(n),收到的码片序列为S(n)<br>发送信息为$\frac{\sum_{i=1}^n{A_i*S_i}}{n}$</p>
</blockquote>
<h3 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h3><blockquote>
<p>早前采用<code>频分复用FDM</code>的模拟传输方式<br>目前采用<code>时分复用PCM</code>的数字传输方式</p>
</blockquote>
<p>早期数字传输系统的缺点</p>
<blockquote>
<p>速率标准不统一。北美（1.544 Mbit/s）欧洲(2.048Mbit/s)\<br>不是同步传输</p>
</blockquote>
<h3 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h3><p>宽带:<code>宽带下行速率达 25 Mbit/s，宽带上行速率达 3 Mbit/s。</code></p>
<p>根据宽带接入媒体划分:有线宽带接入,无线宽带接入</p>
<h4 id="ADSL-技术"><a href="#ADSL-技术" class="headerlink" title="ADSL 技术"></a>ADSL 技术</h4><blockquote>
<p>非对称数字用户线 ADSL (Asymmetric Digital Subscriber Line) 技术：用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务。</p>
</blockquote>
<p>ADSL 调制解调器</p>
<blockquote>
<p>采用离散多音调 DMT（Discrete Multi-Tone）调制技术。<br>DMT 调制技术采用频分复用 FDM 方法。<br>ADSL 不能保证固定的数据率。</p>
</blockquote>
<p>ADSL 的组成</p>
<blockquote>
<p>数字用户线接入复用器 DSLAM（DSL Access Multiplexer），用户线和用户家中的一些设施</p>
</blockquote>
<p>xDSL</p>
<blockquote>
<p>SDSL (Symmetric DSL)：对称数字用户线<br>HDSL (High speed DSL)：高速数字用户线<br>VDSL (Very high speed DSL)：甚高速数字用户线<br>Giga DSL：超高速数字用户线</p>
</blockquote>
<h4 id="光纤同轴混合网（HFC-网）"><a href="#光纤同轴混合网（HFC-网）" class="headerlink" title="光纤同轴混合网（HFC 网）"></a>光纤同轴混合网（HFC 网）</h4><blockquote>
<p>HFC (Hybrid Fiber Coax) 网基于有线电视网 CATV 网。<br>改造：把原有线电视网中的同轴电缆主干部分改换为光纤</p>
</blockquote>
<p>HFC 网具有双向传输功能，扩展了传输频带</p>
<h4 id="FTTx-技术"><a href="#FTTx-技术" class="headerlink" title="FTTx 技术"></a>FTTx 技术</h4><p>代表多种宽带光纤接入方式。</p>
<p>光配线网 ODN (Optical Distribution Network)</p>
<blockquote>
<p>位于光纤干线和广大用户之间。</p>
</blockquote>
<p>无源的光配线网常称为无源光网络 PON (Passive Optical Network)。</p>
<p>采用波分复用 WDM，上行和下行分别使用不同的波长。</p>
<blockquote>
<p>2 种最流行的无源光网络 PON (Passive Optical Network)：<br>以太网无源光网络 EPON (Ethernet PON)<br>吉比特无源光网络 GPON (Gigabit PON)</p>
</blockquote>
<p>接入方式总结</p>
<blockquote>
<p>1)PSTN接入方式<br>2)ISDN接入方式<br>3)DNN接入方式<br>4)xDSL接入方式<br>5)VDSL接入方式<br>6)Cable Modem接入<br>7)LAN接入<br>8)光纤接入网<br>9)PLC电力线通信</p>
</blockquote>
<hr>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>数据链路层使用的信道主要有以下两种类型</p>
<blockquote>
<p>1)<code>点对点信道</code>使用一对一的点对点通信方式。<br>2)<code>广播信道</code>使用一对多的<code>广播通信</code>方式。<br>必须使用专用的<code>共享信道协议</code>来协调这些主机的数据发送。</p>
</blockquote>
<p>两台主机通过互联网进行通信时数据链路层所处的地位</p>
<p><img src="/image/jiwang/3_0_1.png" alt="数据链路层的地位"></p>
<h3 id="数据链路层的几个共同问题"><a href="#数据链路层的几个共同问题" class="headerlink" title="数据链路层的几个共同问题"></a>数据链路层的几个共同问题</h3><h4 id="数据链路和帧"><a href="#数据链路和帧" class="headerlink" title="数据链路和帧"></a>数据链路和帧</h4><blockquote>
<p>链路 (link) ：<br><code>一条无源的点到点的物理线路段，中间没有任何其他的交换结点。</code><br>一条链路只是一条通路的一个组成部分。<br>或物理链路</p>
<p>数据链路 (data link)：<br><code>把实现控制数据传输的协议的硬件和软件加到链路上，就构成了数据链路。</code><br>或逻辑链路。<br>典型实现：适配器（即网卡）</p>
</blockquote>
<h4 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h4><ul>
<li><p>封装成帧<br>  封装成帧 (framing)：在一段数据的前后分别添加首部和尾部，构成一个帧。<br>  首部和尾部的一个重要作用就是进行帧定界（确定帧的界限）。<br>  最大传送单元 MTU (Maximum Transfer Unit) ：规定了所能传送的帧的数据部分长度上限。<br>  用控制字符(SOH/EOT)作为帧定界符</p>
</li>
<li><p>透明传输<br>  透明</p>
<blockquote>
<p>指某一个实际存在的事物看起来却好像不存在一样。</p>
</blockquote>
<p>  用“<code>字节填充</code>”或“<code>字符填充</code>”法解决透明传输的问题</p>
</li>
</ul>
<ul>
<li><p>差错检测</p>
<p>  在一段时间内，传输错误的比特占所传输比特总数的比率称为<code>误码率</code> BER (Bit Error Rate)。</p>
<p>  <code>循环冗余检验 CRC 原理</code></p>
<blockquote>
<p>假设每组k个比特,n位冗余码,除以长度为(n+1)位的除数$p$,余数是R(帧检验序列FCS),发送的帧$(2^nM+FCS)$</p>
</blockquote>
<p>  帧检验序列 FCS</p>
<blockquote>
<p>在数据后面添加上的冗余码称为帧检验序列 FCS<br>循环冗余检验 CRC 和帧检验序列 FCS 并不等同。</p>
</blockquote>
</li>
</ul>
<p>注意:</p>
<blockquote>
<p>仅用循环冗余检验 CRC 差错检测技术只能做到无差错接受<br>“凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错”<br>凡是接收端数据链路层接受的帧均无差错</p>
</blockquote>
<p>“无比特差错”与“无传输差错”</p>
<blockquote>
<p>可靠传输：数据链路层的发送端发送什么，在接收端就收到什么。<br>传输差错可分为两大类：<br>比特差错：传输过程中出现了比特差错；<br>传输差错：帧丢失、帧重复或帧失序等。<br>在数据链路层使用 CRC 检验，能够实现无比特差错的传输，但这还不是可靠传输。<br>要做到可靠传输，还必须再加上帧编号、确认和重传等机制。</p>
</blockquote>
<h3 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h3><h4 id="PPP协议的特点"><a href="#PPP协议的特点" class="headerlink" title="PPP协议的特点"></a>PPP协议的特点</h4><blockquote>
<p>对于点对点的链路，目前使用得最广泛的数据链路层协议是点对点协议 PPP (Point-to-Point Protocol)。<br>PPP 协议在 1994 年就已成为互联网的正式标准 [RFC 1661, STD51]。</p>
</blockquote>
<ul>
<li><p>PPP 协议应满足的需求</p>
<blockquote>
<p>1.简单 ——首要要求。<br>2.封装成帧 —— 必须规定特殊的字符作为帧定界符。<br>3.透明性 —— 必须保证数据传输的透明性。<br>4.多种网络层协议 —— 能够在同一条物理链路上同时支持多种网络层协议。<br>5.多种类型链路 —— 能够在多种类型的链路上运行。<br>6.差错检测 —— 能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。<br>7.检测连接状态 —— 能够及时自动检测出链路是否处于正常工作状态。<br>8.最大传送单元 —— 必须对每一种类型的点对点链路设置最大传送单元  MTU 的标准默认值，促进各种实现之间的互操作性。<br>9.网络层地址协商 —— 必须提供一种机制使通信的两个网络层实体能够通过协商知道或能够配置彼此的网络层地址。<br>10.数据压缩协商 —— 必须提供一种方法来协商使用数据压缩算法。</p>
</blockquote>
</li>
<li><p>PPP 协议的组成</p>
<blockquote>
<p>三个组成部分：<br>一个将 IP 数据报封装到串行链路的方法。<br>一个链路控制协议 LCP (Link Control Protocol)。<br>一套网络控制协议 NCP (Network Control Protocol)。</p>
</blockquote>
</li>
</ul>
<h4 id="PPP协议的帧格式"><a href="#PPP协议的帧格式" class="headerlink" title="PPP协议的帧格式"></a>PPP协议的帧格式</h4><p><img src="/image/jiwang/3_2_2.png" alt="帧格式"></p>
<p>透明传输问题:<br>当 PPP 用在异步传输时，使用字节填充法。<br>当 PPP 用在同步传输链路时，采用零比特填充法。  </p>
<h4 id="PPP协议的工作状态"><a href="#PPP协议的工作状态" class="headerlink" title="PPP协议的工作状态"></a>PPP协议的工作状态</h4><p><img src="/image/jiwang/3_2_3.png" alt="PPP协议工作状态"></p>
<pre><code>PPP 链路初始化过程：
用户拨号接入 ISP 后，就建立了一条从用户个人电脑到 ISP 的物理连接。
用户个人电脑向 ISP 发送一系列的链路控制协议 LCP 分组（封装成多个 PPP 帧），以便建立LCP连接。
之后进行网络层配置。网络控制协议 NCP 给新接入的用户个人电脑分配一个临时的 IP 地址。
当用户通信完毕时，NCP 释放网络层连接，收回原来分配出去的IP地址。LCP 释放数据链路层连接。最后释放的是物理层的连接。
</code></pre><h3 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h3><h4 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h4><p>局域网最主要的特点：网络为一个单位所拥有；地理范围和站点数目均有限。 </p>
<p>局域网具有如下主要优点：</p>
<blockquote>
<p>具有<code>广播功能</code>，从一个站点可很方便地访问全网。<br>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。<br>提高了<code>系统的可靠性、可用性和生存性</code>。</p>
</blockquote>
<p>局域网拓扑结构</p>
<blockquote>
<p><code>a)星形网 b)环形网 3)总线网</code></p>
</blockquote>
<p>共享信道带来的问题:</p>
<blockquote>
<p>若多个设备在共享的广播信道上同时发送数据，则会造成彼此干扰，导致发送失败。</p>
</blockquote>
<p>媒体共享技术:<br>静态划分信道</p>
<blockquote>
<p>频分复用<br>时分复用<br>统计时分复用<br>波分复用<br>码分复用 </p>
</blockquote>
<p>动态媒体接入控制(多点接入):</p>
<blockquote>
<p>随机接入<br>受控接入</p>
</blockquote>
<ul>
<li>以太网的两个主要标准</li>
</ul>
<p>为了是数据链路层能更好的适应多种局域网标准，数据链路层拆成两个子层：<code>逻辑链路控制(LIC)子层和媒体接入控制(MAC)子层</code></p>
<ul>
<li>适配器的作用</li>
</ul>
<p>适配器的重要功能：</p>
<blockquote>
<p>进行串行/并行转换。<br>对数据进行缓存。<br>在计算机的操作系统安装设备驱动程序。<br>实现以太网协议。</p>
</blockquote>
<h4 id="CSMA-CD-协议"><a href="#CSMA-CD-协议" class="headerlink" title="CSMA/CD 协议"></a>CSMA/CD 协议</h4><p>总线特点：易于实现广播通信，简单，可靠。 </p>
<p>为了实现一对一通信，将接收站的硬件地址写入帧首部中的目的地址字段中。仅当数据帧中的目的地址与适配器硬件地址一致时，才能接收这个数据帧。</p>
<p>总线缺点：多个站点同时发送时，会产生发送碰撞或冲突，导致发送失败。</p>
<p>以太网采取了两种重要的措施</p>
<blockquote>
<p>(1) 采用较为灵活的无连接的工作方式。<br>不必先建立连接就可以直接发送数据。<br>对发送的数据帧不进行编号，也不要求对方发回确认。<br>(2) 发送的数据都使用曼彻斯特 (Manchester) 编码。</p>
</blockquote>
<p>CSMA/CD 协议的要点</p>
<blockquote>
<p><code>多点接入</code>：说明这是总线型网络。许多计算机以多点接入的方式连接在一根总线上。<br><code>载波监听</code>：即“边发送边监听”。不管在想要发送数据之前，还是在发送数据之中，每个站都必须不停地检测信道。<br><code>碰撞检测</code>：适配器边发送数据，边检测信道上的信号电压的变化情况。电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞（或冲突）。<br><img src="/image/jiwang/3_3_1.png" alt="碰撞检测"></p>
</blockquote>
<p>争用期：以太网的端到端往返时延 2t  称为争用期，或碰撞窗口。</p>
<p>碰撞后重传的时机</p>
<blockquote>
<p>采用截断二进制指数退避 (truncated binary exponential backoff) 确定。</p>
</blockquote>
<p>强化碰撞：人为干扰信号</p>
<blockquote>
<p>发送站检测到冲突后，立即停止发送数据帧，接着就发送 32 或 48 比特的人为干扰信号 (jamming signal) 。<br>以太网还规定了帧间最小间隔为 9.6 μs。</p>
</blockquote>
<h4 id="使用集线器的星形拓扑"><a href="#使用集线器的星形拓扑" class="headerlink" title="使用集线器的星形拓扑"></a>使用集线器的星形拓扑</h4><p>传统以太网传输媒体：粗同轴电缆 → 细同轴电缆 → 双绞线。<br>采用双绞线的以太网采用星形拓扑。<br>在星形的中心则增加了一种可靠性非常高的设备，叫做集线器 (hub)。</p>
<h4 id="以太网的信道利用率"><a href="#以太网的信道利用率" class="headerlink" title="以太网的信道利用率"></a>以太网的信道利用率</h4><p>单程端到端传播时延 = t ，则争用期长度 = 2t  。检测到碰撞后不发送干扰信号。<br>帧长 = L (bit)，数据发送速率 = C (bit/s)，则帧的发送时间  T0 = L/C (s)。 </p>
<h4 id="以太网的-MAC-层"><a href="#以太网的-MAC-层" class="headerlink" title="以太网的 MAC 层"></a>以太网的 MAC 层</h4><ul>
<li>MAC 层的硬件地址</li>
</ul>
<p><code>硬件地址</code>又称为<code>物理地址</code>，或<code>MAC 地址</code>。<br>IEEE 802 标准为局域网规定了一种 48 位的全球地址（简称为地址）是指局域网上的每一台计算机中<code>固化在适配器的 ROM</code>中的地址。</p>
<p>48 位的  MAC 地址<br><img src="/image/jiwang/3_3_2.png" alt="MAC地址"></p>
<blockquote>
<p>IEEE 注册管理机构 RA 负责向厂家分配前 3 个字节 (即高 24 位)，称为组织唯一标识符 OUI (Organizationally Unique Identifier)。<br>厂家自行指派后 3 个字节 (即低 24 位)，称为扩展标识符 。<br>必须保证生产出的适配器没有重复地址。<br>地址被固化在适配器的 ROM 中。</p>
</blockquote>
<p>单站地址，组地址，广播地址</p>
<blockquote>
<p><code>单站地址</code>：I/G 位 = 0。<br><code>组地址</code>：I/G 位 = 1。组地址用来进行多播。<br><code>广播地址</code>：所有 48 位都为 1（全 1）。只能作为目的地址使用。</p>
</blockquote>
<p>全球管理与本地管理</p>
<blockquote>
<p><code>全球管理</code>：G/L 位 = 0。厂商向 IEEE 购买的 OUI 都属于全球管理。<br><code>本地管理</code>：G/L 位 = 1。 这时用户可任意分配网络上的地址。</p>
</blockquote>
<p>适配器具有过滤功能</p>
<blockquote>
<p>每收到一个 MAC 帧，先用硬件检查帧中的 MAC 地址。<br>如果是发往本站的帧则收下，然后再进行其他的处理。<br>否则就将此帧丢弃，不再进行其他的处理。</p>
</blockquote>
<p>3种帧模式</p>
<blockquote>
<p><code>单播</code> (unicast) 帧（一对一）<br><code>广播</code> (broadcast) 帧（一对全体）<br><code>多播</code> (multicast) 帧（一对多）</p>
</blockquote>
<ul>
<li>MAC 帧的格式</li>
</ul>
<p>常用的以太网 MAC 帧格式有 2 种标准：<br>DIX Ethernet V2 标准<br>IEEE 的 802.3 标准<br>最常用的 MAC 帧是以太网 V2 的格式。</p>
<p>无效的 MAC 帧 </p>
<blockquote>
<p>数据字段的长度与长度字段的值不一致；<br>帧的长度不是整数个字节；<br>用收到的帧检验序列 FCS 查出有差错；<br>数据字段的长度不在 46 ~ 1500 字节之间。<br>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</p>
</blockquote>
<h3 id="以太网的扩展层"><a href="#以太网的扩展层" class="headerlink" title="以太网的扩展层"></a>以太网的扩展层</h3><p>背景知识</p>
<blockquote>
<p>广播域:当一个站点发送广播报文或广播帧时，凡能接收到该报文或帧的区域，称为广播域<br>冲突域:当一个站点发送数据，另外一个站点同时发送数据时就会出现冲突的区域，称为碰撞域。</p>
</blockquote>
<h4 id="在物理层扩展以太网"><a href="#在物理层扩展以太网" class="headerlink" title="在物理层扩展以太网"></a>在物理层扩展以太网</h4><blockquote>
<p>优点:使原来属于不同碰撞域（冲突域）的计算机能够跨碰撞域通信。<br>扩大了以太网覆盖的地理范围。<br>缺点:碰撞域增大了，总的吞吐量未提高。<br>如果使用不同的以太网技术（如数据率不同），那么就不能用集线器将它们互连起来。 </p>
</blockquote>
<p><code>碰撞域（collision domain）又称为冲突域，指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。
碰撞域越大，发生碰撞的概率越高。</code></p>
<h4 id="在数据链路层扩展以太网"><a href="#在数据链路层扩展以太网" class="headerlink" title="在数据链路层扩展以太网"></a>在数据链路层扩展以太网</h4><p>网桥:工作在数据链路层。根据 MAC 帧的目的地址对收到的帧进行转发和过滤。或者转发，或者丢弃。<br>交换机:工作在数据链路层。多端口的网桥。可明显地提高以太网的性能。</p>
<ul>
<li><p>以太网交换机的特点 </p>
<p>  实质上是一个<code>多接口网桥</code>。<br>  通常有十几个或更多的接口。<br>  每个接口都直接与一个单台主机或另一个以太网交换机相连，并且一般都工作在<code>全双工方式</code>。<br>  以太网交换机具有<code>并行性</code>。<br>  接口有存储器。<br>  即插即用。其内部的帧<code>交换表</code>（又称为地址表）是通过<code>自学习算法</code>自动地逐渐建立起来的。这种交换表就是一个内容<code>可寻址存储器CAM (Content addressable Memory)。</code><br>  使用<code>专用的交换结构芯片</code>，用硬件转发，其转发速率要比使用软件转发的网桥快很多。</p>
</li>
<li><p>以太网交换机的自学习功能</p>
<p>  考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的有效时间（默认300秒）。过期的项目就自动被删除。</p>
</li>
</ul>
<p>存在的问题：回路</p>
<p>消除回路：<code>使用生成树协议（SPT）</code></p>
<p>生成树协议 STP  (Spanning Tree Protocol) 要点：<br>不改变网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是无环路的树状结构，从而消除了兜圈子现象</p>
<ul>
<li>从总线以太网到星形以太网</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">早期</th>
<th style="text-align:center">现在</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">采用无源的总线结构。</td>
<td style="text-align:center">以太网交换机为中心的星形结构</td>
</tr>
<tr>
<td style="text-align:center">使用 CSMA/CD 协议，以半双工方式工作。</td>
<td style="text-align:center">不使用共享总线，没有碰撞问题，不使用 CSMA/CD 协议，以全双工方式工作。但仍然采用以太网的帧结构。</td>
</tr>
</tbody>
</table>
</div>
<h4 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h4><p>以太网主要存在的问题</p>
<blockquote>
<p>广播风暴<br>安全问题<br>管理困难</p>
</blockquote>
<h3 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h3><h4 id="100BASE-T-以太网"><a href="#100BASE-T-以太网" class="headerlink" title="100BASE-T 以太网"></a>100BASE-T 以太网</h4><pre><code>快速以太网 (Fast Ethernet)。
在双绞线上传送 100 Mbit/s 基带信号的星形拓扑以太网
</code></pre><h4 id="吉比特以太网"><a href="#吉比特以太网" class="headerlink" title="吉比特以太网"></a>吉比特以太网</h4><pre><code>一种来自现有的以太网，另一种则是美国国家标准协会 ANSI 制定的光纤通道 FC (Fiber Channel)。
</code></pre><h4 id="10-吉比特以太网-10GE-和更快的以太网"><a href="#10-吉比特以太网-10GE-和更快的以太网" class="headerlink" title="10 吉比特以太网 (10GE) 和更快的以太网"></a>10 吉比特以太网 (10GE) 和更快的以太网</h4><pre><code>万兆比特。
与 10、100 Mbit/s 和 1 Gbit/s 以太网的帧格式完全相同。
保留了 IEEE 802.3 标准规定的以太网最小和最大帧长。
只使用光纤作为传输媒体。
只工作在全双工方式，没有争用问题，不使用 CSMA/CD 协议。 
</code></pre><h4 id="使用以太网进行宽带接入"><a href="#使用以太网进行宽带接入" class="headerlink" title="使用以太网进行宽带接入"></a>使用以太网进行宽带接入</h4><p>以太网宽带接入具有以下特点：<br>可以提供双向的宽带通信。<br>可以根据用户对带宽的需求灵活地进行带宽升级。<br>可以实现端到端的以太网传输，中间不需要再进行帧格式的转换。<br>但不支持用户身份鉴别。</p>
<p>PPPoE (PPP over Ethernet) ：在以太网上运行 PPP。<br>将 PPP 帧封装到以太网中来传输。<br>现在的光纤宽带接入 FTTx 都要使用 PPPoE 的方式进行接入。<br>利用 ADSL 进行宽带上网时，从用户个人电脑到家中的 ADSL 调制解调器之间的连接也使用 RJ-45 和 5 类线，也使用 PPPoE。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机知识</tag>
      </tags>
  </entry>
</search>
