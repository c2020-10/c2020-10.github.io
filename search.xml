<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>动态规划</title>
    <url>/2022/02/08/%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9AII/</url>
    <content><![CDATA[<h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><h3 id="洛谷p1352"><a href="#洛谷p1352" class="headerlink" title="洛谷p1352"></a>洛谷p1352</h3><h4 id="简单版本"><a href="#简单版本" class="headerlink" title="简单版本"></a>简单版本</h4><blockquote>
<p>树形DP的常规套路，考虑子节点对父节点的影响即可</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n,x,w[N],f[N][<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>]=w[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:v[u])<span class="built_in">dfs</span>(x),f[u][<span class="number">1</span>]+=f[x][<span class="number">0</span>],f[u][<span class="number">0</span>]+=<span class="built_in">max</span>(f[x][<span class="number">1</span>],f[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i];</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(f[<span class="number">1</span>][<span class="number">1</span>],f[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="升级版-背包-树形DP"><a href="#升级版-背包-树形DP" class="headerlink" title="升级版(背包+树形DP)"></a>升级版(背包+树形DP)</h4><blockquote>
<p>相较于简单版本，对物品容量增加了限制<br>对于父节点，每次遍历子节点，并对子节点做一次背包</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> n,x,w[N],f[N][N][<span class="number">2</span>],m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:v[u])&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                f[u][i][<span class="number">0</span>]=<span class="built_in">max</span>(f[u][i][<span class="number">0</span>],f[u][i-j][<span class="number">0</span>]+<span class="built_in">max</span>(f[x][j][<span class="number">0</span>],f[x][j][<span class="number">1</span>]));</span><br><span class="line">                f[u][i][<span class="number">1</span>]=<span class="built_in">max</span>(f[u][i][<span class="number">1</span>],f[u][i-j][<span class="number">1</span>]+f[x][j][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=m;i;i--)f[u][i][<span class="number">1</span>]=<span class="built_in">max</span>(f[u][i][<span class="number">1</span>],f[u][i<span class="number">-1</span>][<span class="number">1</span>]+w[u]);</span><br><span class="line">    f[u][<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i];</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(f[<span class="number">1</span>][m][<span class="number">1</span>],f[<span class="number">1</span>][m][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="换根DP"><a href="#换根DP" class="headerlink" title="换根DP"></a>换根DP</h2><blockquote>
<p> 换根DP经典题目套路，通常第一遍dfs1算出子节点对父节点的影响，第二次dfs算出父节点对子节点的影响。 </p>
</blockquote>
<h3 id="codeforces-1187-E"><a href="#codeforces-1187-E" class="headerlink" title="codeforces 1187 E"></a>codeforces 1187 E</h3><blockquote>
<p>Ⅰ 在该题中对于每个点$u$利用dfs的遍历顺序算出子节点对于该点的影响，并存于f[u]中，此时就有$f[u]&#x3D;\sum\limits_{x\in u}f[x]$<br>Ⅱ 在第二次dfs时，算出父节点对于子节点的贡献w[x],此时每次遍历时，求得的父节点价值为w[u],可以求得子节点的价值为w[x]&#x3D;w[u]+f[u]-f[x]-sz[x]+n-sz[x]<br>III 最后一步为求父节点和子节点总价值，即可求得该点的Max值，求所有点的Max中的Max即可。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;PII;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> n,a,b,f[<span class="number">200005</span>],sz[<span class="number">200005</span>],w[<span class="number">200005</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	st[u]=<span class="literal">true</span>;</span><br><span class="line">	sz[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:v[u])</span><br><span class="line">		<span class="keyword">if</span>(!st[x])&#123;</span><br><span class="line">			<span class="built_in">dfs1</span>(x);</span><br><span class="line">			sz[u]+=sz[x];</span><br><span class="line">			f[u]+=f[x];</span><br><span class="line">		&#125;</span><br><span class="line">	f[u]+=sz[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	st[u]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:v[u])</span><br><span class="line">		<span class="keyword">if</span>(!st[x])&#123;</span><br><span class="line">			w[x]=w[u]+f[u]-f[x]-sz[x]+n-sz[x];</span><br><span class="line">			<span class="built_in">dfs2</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		v[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">		v[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans=<span class="built_in">max</span>(ans,f[i]+w[i]);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//	ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//  cin.tie(nullptr);</span></span><br><span class="line">	<span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//	cin&gt;&gt;T;</span></span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">		<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h2><blockquote>
<p>数位dp经典做题方法，init的初始化时数位dp的一大经典特色，其次就是分析啦</p>
</blockquote>
<h3 id="CodeForce1036C-Classy-Numbers"><a href="#CodeForce1036C-Classy-Numbers" class="headerlink" title="CodeForce1036C Classy Numbers"></a>CodeForce1036C Classy Numbers</h3><blockquote>
<p>此题题意，在$[l,r]$中，找出非0数不超过3的数的个数</p>
</blockquote>
<h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><blockquote>
<p>可以定义一个数组$f[n][m][s]$，其中n为数位个数，m为第i位的数，s为非0的数字个数。在做完init之后，剩下的就是进行dp分解了，根据闫氏dp分析法，从高位向低位递推，对于第i位分为$[0,a_i-1],a_i$两种情况，我们只需算第一种情况，同时，每次算时，需一个last值记录非0数的个数对后续dp的影响，在最后判断等于这个数时是否满足，根据情况进行加减</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     a[n]  第n位</span><br><span class="line">     / \</span><br><span class="line">    /   \</span><br><span class="line">0~a[n]-1  a[n-1]</span><br><span class="line">         / \</span><br><span class="line">        /   \</span><br><span class="line"> 0~a[n-1]-1  ...</span><br><span class="line">             / \</span><br><span class="line">            /   \</span><br><span class="line">       0~a[0]-1 a[0]</span><br></pre></td></tr></table></figure>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> l,r,f[<span class="number">20</span>][<span class="number">10</span>][<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)f[<span class="number">1</span>][i][i!=<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">9</span>;k++)&#123;</span><br><span class="line">				f[i][j][<span class="number">4</span>]+=f[i<span class="number">-1</span>][k][<span class="number">4</span>];</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;=<span class="number">3</span>;u++)&#123;</span><br><span class="line">					f[i][j][u+(j!=<span class="number">0</span>)]+=f[i<span class="number">-1</span>][k][u];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;nums;</span><br><span class="line">	<span class="keyword">while</span>(n)nums.<span class="built_in">push_back</span>(n%<span class="number">10</span>),n/=<span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> last=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=nums.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">		<span class="type">int</span> x=nums[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=(i==nums.<span class="built_in">size</span>());j&lt;x;j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">3</span>;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(k+last&lt;=<span class="number">3</span>)res+=f[i+<span class="number">1</span>][j][k];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		last+=(x!=<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(last&lt;=<span class="number">3</span>)res++;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		cout&lt;&lt;<span class="built_in">dp</span>(r)-<span class="built_in">dp</span>(l<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="状态压缩dp"><a href="#状态压缩dp" class="headerlink" title="状态压缩dp"></a>状态压缩dp</h2><blockquote>
<p>状态压缩dp的难点在于对于二进制的理解</p>
</blockquote>
<h3 id="Codeforce-1238-E-Keyboard-Purchase"><a href="#Codeforce-1238-E-Keyboard-Purchase" class="headerlink" title="Codeforce 1238 E.Keyboard Purchase"></a>Codeforce 1238 E.Keyboard Purchase</h3><blockquote>
<p>寻找出最小的排列代价，使得$\sum{|pos_i-pos_{i-1}|}$最小</p>
</blockquote>
<h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><blockquote>
<p>预处理出g数组(相邻字母的每个种类个数),因为m&lt;&#x3D;20,可以对其进行二进制枚举，对于每次枚举,当前状况必定由前一状态得来,此次新的枚举，其代价是前一状态的代价加上$\sum\limits_{j\in算过}\sum\limits_{k\in未算}g[j][k]$,</p>
</blockquote>
<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define int long long </span><br><span class="line">using namespace std;</span><br><span class="line">int n,m;</span><br><span class="line">int g[26][26];</span><br><span class="line">int f[1&lt;&lt;20];</span><br><span class="line">string s;</span><br><span class="line">void solve()</span><br><span class="line">&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	cin&gt;&gt;s;</span><br><span class="line">	for(int i=1;i&lt;n;i++)g[s[i-1]-&#x27;a&#x27;][s[i]-&#x27;a&#x27;]++,g[s[i]-&#x27;a&#x27;][s[i-1]-&#x27;a&#x27;]++;</span><br><span class="line">	memset(f,0x3f,sizeof f);</span><br><span class="line">	f[0]=0;</span><br><span class="line">	for(int i=1;i&lt;1&lt;&lt;m;i++)&#123;</span><br><span class="line">		int sum=0;</span><br><span class="line">		for(int j=0;j&lt;m;j++)</span><br><span class="line">			for(int k=j+1;k&lt;m;k++)</span><br><span class="line">				if((i&gt;&gt;j&amp;1)^(i&gt;&gt;k&amp;1))</span><br><span class="line">					sum+=g[j][k];</span><br><span class="line">		for(int j=0;j&lt;m;j++)</span><br><span class="line">			if(i&gt;&gt;j&amp;1)</span><br><span class="line">				f[i]=min(f[i-(1&lt;&lt;j)]+sum,f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;f[(1&lt;&lt;m)-1]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signed main()</span><br><span class="line">&#123;</span><br><span class="line">	solve();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法例题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
